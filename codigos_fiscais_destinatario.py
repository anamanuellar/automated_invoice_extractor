"""
An√°lise de Notas Fiscais - Perspectiva do DESTINAT√ÅRIO
=======================================================

M√≥dulo especializado em analisar NFs do ponto de vista de quem vai RECEBER e CONTABILIZAR

Principais funcionalidades:
- Validar direito a cr√©dito de ICMS
- Validar direito a cr√©dito de PIS/COFINS
- Sugerir lan√ßamento cont√°bil
- Verificar conformidade com regime tribut√°rio
- Calcular impacto fiscal da opera√ß√£o

Autor: Sistema de Extrator de Notas Fiscais
"""

from typing import Dict, List, Optional, Any
from codigos_fiscais import CFOP, NCM, CSOSN, OCST


# =============== AN√ÅLISE COMO DESTINAT√ÅRIO ===============

def analisar_nf_como_destinatario(
    cfop: str,
    ncm: str,
    csosn_ou_cst_recebido: str,
    regime_destinatario: str,
    regime_emitente: str,
    uf_origem: str,
    valor_total: float
) -> Dict[str, Any]:
    """
    Analisa a nota fiscal do ponto de vista do destinat√°rio (empresa que recebe).
    Retorna informa√ß√µes sobre conformidade fiscal, cr√©ditos e poss√≠veis alertas.
    """
    from codigos_fiscais import CFOP, NCM, OCST, CSOSN

    resultado = {
        "cfop_info": None,
        "ncm_info": None,
        "tributo_info": None,
        "regime_destinatario": regime_destinatario,
        "regime_emitente": regime_emitente,
        "conformidade": True,
        "credito_icms": {"direito": False, "valor": 0.0, "motivo": ""},
        "credito_pis": {"direito": False, "valor": 0.0, "motivo": ""},
        "credito_cofins": {"direito": False, "valor": 0.0, "motivo": ""},
        "avisos": [],
        "alertas": [],
        "lan√ßamento_contabil": {},
    }

    # üîß Normaliza CFOP e NCM (remove pontos, v√≠rgulas e espa√ßos)
    cfop_limpo = str(cfop).replace(".", "").replace(",", "").strip()
    ncm_limpo = str(ncm).replace(".", "").replace(",", "").strip()

    # === 1Ô∏è‚É£ Busca CFOP ===
    cfop_info = CFOP.buscar(cfop_limpo)
    if not cfop_info:
        resultado["conformidade"] = False
        resultado["alertas"].append(f"‚ùå CFOP {cfop} inv√°lido ou n√£o encontrado na base.")
    else:
        resultado["cfop_info"] = cfop_info.__dict__

    # === 2Ô∏è‚É£ Busca NCM ===
    ncm_info = NCM.buscar(ncm_limpo)
    if not ncm_info:
        resultado["avisos"].append(f"‚ö†Ô∏è NCM {ncm} n√£o encontrado na base. Tentando inferir via IA...")
        # üîç IA leve do Hugging Face para sugerir NCM
        try:
            from ia_simples import inferir_ncm
            ncm_sugerido = inferir_ncm(ncm_limpo)
            if ncm_sugerido:
                resultado["avisos"].append(f"ü§ñ IA sugeriu NCM prov√°vel: {ncm_sugerido}")
        except Exception as e:
            resultado["avisos"].append(f"‚öôÔ∏è IA indispon√≠vel no momento ({e})")
    else:
        resultado["ncm_info"] = ncm_info.__dict__

    # === 3Ô∏è‚É£ Valida CST / CSOSN de acordo com regime ===
    if regime_emitente == "normal":
        ocst_info = OCST.buscar(csosn_ou_cst_recebido)
        if not ocst_info:
            resultado["conformidade"] = False
            resultado["alertas"].append(
                f"‚ùå CST {csosn_ou_cst_recebido} inv√°lido para regime normal. "
                f"Consulte tabela de CST aplic√°vel (101, 102, 201...)."
            )
        else:
            resultado["tributo_info"] = ocst_info.__dict__
    else:
        csosn_info = CSOSN.buscar(csosn_ou_cst_recebido)
        if not csosn_info:
            resultado["alertas"].append(
                f"‚ö†Ô∏è CSOSN {csosn_ou_cst_recebido} n√£o encontrado para regime Simples Nacional."
            )
        else:
            resultado["tributo_info"] = csosn_info.__dict__

    # === 4Ô∏è‚É£ Simula√ß√£o de direito a cr√©ditos (ICMS / PIS / COFINS) ===
    if regime_destinatario == "normal":
        if cfop_info and cfop_info.icms_aplica:
            resultado["credito_icms"] = {
                "direito": True,
                "valor": valor_total * 0.18,
                "motivo": "Opera√ß√£o tributada com direito a cr√©dito."
            }
        else:
            resultado["credito_icms"]["motivo"] = "CFOP sem destaque de ICMS."

        resultado["credito_pis"] = {
            "direito": True,
            "valor": valor_total * 0.0165,
            "motivo": "Regime n√£o cumulativo - cr√©dito PIS."
        }

        resultado["credito_cofins"] = {
            "direito": True,
            "valor": valor_total * 0.076,
            "motivo": "Regime n√£o cumulativo - cr√©dito COFINS."
        }

    elif regime_destinatario == "simples":
        resultado["credito_icms"]["motivo"] = "Empresa do Simples n√£o gera cr√©dito de ICMS."
        resultado["credito_pis"]["motivo"] = "Simples Nacional - regime cumulativo."
        resultado["credito_cofins"]["motivo"] = "Simples Nacional - regime cumulativo."

    # === 5Ô∏è‚É£ Classifica√ß√£o cont√°bil sugerida ===
    try:
        from extrator import classificar_contabilmente
        tipo = classificar_contabilmente(cfop_limpo)
        resultado["lan√ßamento_contabil"] = {
            "tipo_operacao": tipo,
            "resumo": f"Lan√ßamento cont√°bil baseado no CFOP {cfop_limpo}",
            "observacoes": [
                f"Emitente: {regime_emitente}",
                f"Destinat√°rio: {regime_destinatario}",
                f"NCM: {ncm_limpo or 'n√£o informado'}"
            ]
        }
    except Exception as e:
        resultado["avisos"].append(f"Erro ao classificar contabilmente: {e}")

    return resultado


# =============== C√ÅLCULO DE CR√âDITOS ===============

def _calcular_credito_icms(
    regime_destinatario: str,
    regime_emitente: str,
    csosn_ou_cst: str,
    cfop: str,
    valor_icms: Optional[float] = None,
) -> Dict[str, Any]:
    """
    Calcula se destinat√°rio tem direito a cr√©dito de ICMS
    
    Regras:
    - Simples Nacional: NUNCA tem cr√©dito de ICMS
    - Lucro Real/Presumido: TEM cr√©dito se opera√ß√£o normal
    """

    resultado = {
        "direito": False,
        "valor": 0.0,
        "motivo": "",
    }

    if not valor_icms or valor_icms <= 0:
        resultado["motivo"] = "Sem ICMS na nota"
        return resultado

    # ‚ùå SIMPLES NACIONAL n√£o tem cr√©dito de ICMS
    if regime_destinatario == "simples":
        resultado["motivo"] = "Simples Nacional n√£o aproveita cr√©dito de ICMS"
        return resultado

    # ‚úÖ LUCRO REAL/PRESUMIDO tem cr√©dito em opera√ß√µes normais
    if regime_destinatario in ["lucro_real", "lucro_presumido"]:
        # Verificar tipo de opera√ß√£o (CFOP)
        cfop_info = CFOP.buscar(cfop)
        if cfop_info and cfop_info.icms_aplica:
            # Verificar c√≥digo de situa√ß√£o
            ocst_info = OCST.buscar(csosn_ou_cst)
            if ocst_info and ocst_info.credito_icms:
                resultado["direito"] = True
                resultado["valor"] = valor_icms
                resultado["motivo"] = "Cr√©dito permitido para regime normal"
                return resultado
            else:
                resultado["motivo"] = (
                    f"O-CST {csosn_ou_cst} n√£o permite cr√©dito de ICMS "
                    f"(ex: isento, diferido, ST)"
                )
                return resultado
        else:
            resultado["motivo"] = "CFOP n√£o aplica ICMS"
            return resultado

    resultado["motivo"] = "Regime n√£o identificado"
    return resultado


def _calcular_credito_pis(
    regime_destinatario: str,
    regime_emitente: str,
    cfop: str,
    valor_pis: Optional[float] = None,
) -> Dict[str, Any]:
    """
    Calcula se destinat√°rio tem direito a cr√©dito de PIS
    
    Regras:
    - Simples Nacional: N√£o tem cr√©dito de PIS (j√° est√° tudo na al√≠quota)
    - Lucro Real: TEM cr√©dito de PIS em opera√ß√µes de entrada
    - Lucro Presumido: N√ÉO tem cr√©dito de PIS
    """

    resultado = {
        "direito": False,
        "valor": 0.0,
        "motivo": "",
    }

    if not valor_pis or valor_pis <= 0:
        resultado["motivo"] = "Sem PIS na nota"
        return resultado

    # ‚úÖ Apenas LUCRO REAL tem cr√©dito de PIS
    if regime_destinatario == "lucro_real":
        cfop_info = CFOP.buscar(cfop)
        if cfop_info and cfop_info.tipo == "Entrada":
            resultado["direito"] = True
            resultado["valor"] = valor_pis
            resultado["motivo"] = "Cr√©dito de PIS permitido em Lucro Real (entrada)"
            return resultado
        else:
            resultado["motivo"] = "PIS em Lucro Real s√≥ tem cr√©dito em entradas"
            return resultado

    # ‚ùå Simples e Lucro Presumido n√£o t√™m
    resultado["motivo"] = (
        f"PIS: {regime_destinatario.title()} n√£o aproveita cr√©dito"
    )
    return resultado


def _calcular_credito_cofins(
    regime_destinatario: str,
    regime_emitente: str,
    cfop: str,
    valor_cofins: Optional[float] = None,
) -> Dict[str, Any]:
    """
    Calcula se destinat√°rio tem direito a cr√©dito de COFINS
    
    Regras:
    - Simples Nacional: N√£o tem cr√©dito de COFINS (j√° est√° tudo na al√≠quota)
    - Lucro Real: TEM cr√©dito de COFINS em opera√ß√µes de entrada
    - Lucro Presumido: N√ÉO tem cr√©dito de COFINS
    """

    resultado = {
        "direito": False,
        "valor": 0.0,
        "motivo": "",
    }

    if not valor_cofins or valor_cofins <= 0:
        resultado["motivo"] = "Sem COFINS na nota"
        return resultado

    # ‚úÖ Apenas LUCRO REAL tem cr√©dito de COFINS
    if regime_destinatario == "lucro_real":
        cfop_info = CFOP.buscar(cfop)
        if cfop_info and cfop_info.tipo == "Entrada":
            resultado["direito"] = True
            resultado["valor"] = valor_cofins
            resultado["motivo"] = "Cr√©dito de COFINS permitido em Lucro Real (entrada)"
            return resultado
        else:
            resultado["motivo"] = "COFINS em Lucro Real s√≥ tem cr√©dito em entradas"
            return resultado

    # ‚ùå Simples e Lucro Presumido n√£o t√™m
    resultado["motivo"] = (
        f"COFINS: {regime_destinatario.title()} n√£o aproveita cr√©dito"
    )
    return resultado


# =============== LAN√áAMENTO CONT√ÅBIL ===============

def _sugerir_lancamento_contabil(
    regime_destinatario: str,
    valor_total: float,
    credito_icms: float = 0.0,
    credito_pis: float = 0.0,
    credito_cofins: float = 0.0,
    cfop: str = "1100",
) -> Dict[str, Any]:
    """
    Sugere como contabilizar a NF conforme regime do destinat√°rio
    
    Simples Nacional:
    - ICMS j√° vem incluso no valor (n√£o destaca)
    
    Lucro Real/Presumido:
    - Destaca ICMS a recuperar
    - Destaca PIS/COFINS a recuperar
    """

    lancamento = {
        "regime": regime_destinatario,
        "tipo_operacao": "",
        "debitos": [],
        "creditos": [],
        "resumo": "",
        "observacoes": [],
    }

    cfop_info = CFOP.buscar(cfop)
    if cfop_info:
        lancamento["tipo_operacao"] = cfop_info.descricao

    if regime_destinatario == "simples":
        # ===== SIMPLES NACIONAL =====
        # Tudo junto, ICMS j√° incluso
        lancamento["debitos"].append({
            "conta": "1.1.1.2.001 - Estoque de Mercadorias",
            "valor": valor_total,
            "descricao": f"Mercadoria recebida ({cfop_info.descricao if cfop_info else 'CFOP'})"
        })

        lancamento["creditos"].append({
            "conta": "2.1.1.001 - Fornecedores a Pagar",
            "valor": valor_total,
            "descricao": "Fornecedor"
        })

        lancamento["resumo"] = f"Compra de R$ {valor_total:.2f} (ICMS incluso)"
        
        lancamento["observacoes"] = [
            "‚úì Em Simples Nacional, o ICMS j√° vem incluso no valor",
            "‚úì N√£o h√° destaque de cr√©ditos de impostos",
            "‚úì O imposto √© recolhido mensalmente via DAS"
        ]

    elif regime_destinatario in ["lucro_real", "lucro_presumido"]:
        # ===== LUCRO REAL/PRESUMIDO =====
        # Destaca impostos
        valor_base = valor_total - credito_icms - credito_pis - credito_cofins

        lancamento["debitos"].append({
            "conta": "1.1.1.2.001 - Estoque de Mercadorias",
            "valor": valor_base,
            "descricao": f"Custo da mercadoria (sem impostos)",
        })

        total_debitado = valor_base

        if credito_icms > 0:
            lancamento["debitos"].append({
                "conta": "1.1.2.1.001 - ICMS a Recuperar",
                "valor": credito_icms,
                "descricao": "Cr√©dito de ICMS"
            })
            total_debitado += credito_icms

        if credito_pis > 0:
            lancamento["debitos"].append({
                "conta": "1.1.2.1.002 - PIS a Recuperar",
                "valor": credito_pis,
                "descricao": "Cr√©dito de PIS"
            })
            total_debitado += credito_pis

        if credito_cofins > 0:
            lancamento["debitos"].append({
                "conta": "1.1.2.1.003 - COFINS a Recuperar",
                "valor": credito_cofins,
                "descricao": "Cr√©dito de COFINS"
            })
            total_debitado += credito_cofins

        lancamento["creditos"].append({
            "conta": "2.1.1.001 - Fornecedores a Pagar",
            "valor": valor_total,
            "descricao": "Fornecedor"
        })

        # Montagem do resumo
        creditos_str = []
        if credito_icms > 0:
            creditos_str.append(f"ICMS R$ {credito_icms:.2f}")
        if credito_pis > 0:
            creditos_str.append(f"PIS R$ {credito_pis:.2f}")
        if credito_cofins > 0:
            creditos_str.append(f"COFINS R$ {credito_cofins:.2f}")

        creditos_texto = ", ".join(creditos_str) if creditos_str else "nenhum"
        lancamento["resumo"] = (
            f"Compra de R$ {valor_total:.2f} "
            f"(custo R$ {valor_base:.2f} + cr√©ditos: {creditos_texto})"
        )

        regime_texto = "Lucro Real" if regime_destinatario == "lucro_real" else "Lucro Presumido"
        lancamento["observacoes"] = [
            f"‚úì Em {regime_texto}, os impostos s√£o destacados",
            f"‚úì Cr√©ditos de impostos: {creditos_texto}",
            f"‚úì Custo real da mercadoria: R$ {valor_base:.2f}",
        ]

    return lancamento


# =============== RESUMO DE AN√ÅLISE ===============

def gerar_resumo_analise(analise: Dict[str, Any]) -> str:
    """
    Gera um resumo textual da an√°lise para apresenta√ß√£o
    """

    resume = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         AN√ÅLISE DE NOTA FISCAL - PERSPECTIVA DESTINAT√ÅRIO      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä DADOS B√ÅSICOS
‚îú‚îÄ Seu Regime: {analise['regime_destinatario'].upper()}
‚îú‚îÄ Regime do Emitente: {analise['regime_emitente'].upper()}
‚îî‚îÄ Conformidade: {'‚úÖ OK' if analise['conformidade'] else '‚ùå PROBLEMAS'}

üí∞ DIREITOS A CR√âDITOS
‚îú‚îÄ ICMS: {'‚úÖ ' + f"R$ {analise['credito_icms']['valor']:.2f}" if analise['credito_icms']['direito'] else '‚ùå Sem direito'}
‚îÇ  ‚îî‚îÄ Motivo: {analise['credito_icms']['motivo']}
‚îú‚îÄ PIS:  {'‚úÖ ' + f"R$ {analise['credito_pis']['valor']:.2f}" if analise['credito_pis']['direito'] else '‚ùå Sem direito'}
‚îÇ  ‚îî‚îÄ Motivo: {analise['credito_pis']['motivo']}
‚îî‚îÄ COFINS: {'‚úÖ ' + f"R$ {analise['credito_cofins']['valor']:.2f}" if analise['credito_cofins']['direito'] else '‚ùå Sem direito'}
   ‚îî‚îÄ Motivo: {analise['credito_cofins']['motivo']}

‚ö†Ô∏è  AVISOS ({len(analise['avisos'])})
"""

    for i, aviso in enumerate(analise['avisos'], 1):
        resume += f"‚îú‚îÄ {i}. {aviso}\n"

    if analise['alertas']:
        resume += f"\nüö® ALERTAS CR√çTICOS ({len(analise['alertas'])})\n"
        for i, alerta in enumerate(analise['alertas'], 1):
            resume += f"‚îú‚îÄ {i}. {alerta}\n"

    lancamento = analise['lan√ßamento_contabil']
    if lancamento:
        resume += f"""
üìù LAN√áAMENTO CONT√ÅBIL SUGERIDO
‚îú‚îÄ Tipo: {lancamento['tipo_operacao']}
‚îú‚îÄ Resumo: {lancamento['resumo']}
‚îî‚îÄ Observa√ß√µes:
"""
        for obs in lancamento['observacoes']:
            resume += f"   {obs}\n"

    resume += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"

    return resume


